# scripts/voice_advisory.py

import os
import requests
import numpy as np
import speech_recognition as sr
from ultralytics import YOLO
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
API_KEY = os.getenv("DUBVERSE_API_KEY")

# Load trained YOLO model
model = YOLO("/Users/nikki/Agro_AI_/runs/classify/train/weights/best.pt")

# Disease ‚Üí Advisory text mapping
disease_solutions = {
    "Black Rot": {
        "en": "Black Rot detected. Use Mancozeb spray and prune infected leaves.",
        "hi": "‡§¨‡•ç‡§≤‡•à‡§ï ‡§∞‡•â‡§ü ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ ‡§π‡•à‡•§ ‡§Æ‡•á‡§®‡•ç‡§ï‡•ã‡§ú‡§º‡•á‡§¨ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§™‡§§‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§õ‡§Ç‡§ü‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§",
        "mr": "‡§ï‡§æ‡§≥‡•Ä ‡§ï‡•Å‡§ú ‡§Ü‡§¢‡§≥‡§≤‡•Ä. ‡§Æ‡•Ö‡§®‡•ç‡§ï‡•ã‡§ù‡•á‡§¨ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§µ‡§æ‡§™‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§™‡§æ‡§®‡•á ‡§õ‡§æ‡§ü‡•Ç‡§® ‡§ü‡§æ‡§ï‡§æ."
    },
    "Esca": {
        "en": "Esca detected. Remove infected vines and apply proper fungicide.",
        "hi": "‡§è‡§∏‡•ç‡§ï‡§æ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ‡•§ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§¨‡•á‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§â‡§ö‡§ø‡§§ ‡§ï‡§µ‡§ï‡§®‡§æ‡§∂‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
        "mr": "‡§è‡§∏‡•ç‡§ï‡§æ ‡§Ü‡§¢‡§≥‡§≤‡§æ. ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§µ‡•á‡§≤‡•Ä ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§æ ‡§Ü‡§£‡§ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§¨‡•Å‡§∞‡§∂‡•Ä‡§®‡§æ‡§∂‡§ï ‡§µ‡§æ‡§™‡§∞‡§æ."
    },
    "Leaf Blight": {
        "en": "Leaf Blight detected. Apply copper-based fungicides and ensure proper drainage.",
        "hi": "‡§™‡§§‡•ç‡§§‡•Ä ‡§ù‡•Å‡§≤‡§∏‡§æ ‡§∞‡•ã‡§ó ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ ‡§π‡•à‡•§ ‡§ï‡•â‡§™‡§∞-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§µ‡§ï‡§®‡§æ‡§∂‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç ‡§§‡§•‡§æ ‡§â‡§ö‡§ø‡§§ ‡§ú‡§≤ ‡§®‡§ø‡§ï‡§æ‡§∏‡•Ä ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "mr": "‡§™‡§æ‡§®‡§æ‡§Ç‡§µ‡§∞ ‡§ï‡§∞‡§™‡§æ ‡§Ü‡§¢‡§≥‡§≤‡§æ. ‡§§‡§æ‡§Ç‡§¨‡•á-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§¨‡•Å‡§∞‡§∂‡•Ä‡§®‡§æ‡§∂‡§ï‡•á ‡§µ‡§æ‡§™‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§®‡§ø‡§ö‡§∞‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§æ."
    },
    "Healthy": {
        "en": "The leaf is healthy. No action needed.",
        "hi": "‡§™‡§§‡•ç‡§§‡§æ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§π‡•à‡•§ ‡§ï‡•ã‡§à ‡§ï‡§æ‡§∞‡•ç‡§∞‡§µ‡§æ‡§à ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§",
        "mr": "‡§™‡§æ‡§® ‡§®‡§ø‡§∞‡•ã‡§ó‡•Ä ‡§Ü‡§π‡•á. ‡§ï‡§æ‡§π‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§ó‡§∞‡§ú ‡§®‡§æ‡§π‡•Ä."
    }
}

def recognize_speech(prompt_text="üéôÔ∏è Speak now"):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print(prompt_text)
        audio = recognizer.listen(source)
    try:
        text = recognizer.recognize_google(audio, language='hi-IN')
        print("üìù You said:", text)
        return text
    except:
        print("‚ö†Ô∏è Could not recognize speech.")
        return ""

def speak_response(text, lang='en', api_key=None):
    try:
        if api_key:
            print(f"üîä Using Dubverse TTS for {lang.upper()}...")
            speaker_map = {
                'en': 184,
                'hi': 182,
                'mr': 190

            }
            speaker_id = speaker_map.get(lang, 184)
            dubverse_tts(text, api_key, speaker_no=speaker_id)
        else:
            raise Exception("Dubverse API key not found.")
    except Exception as e:
        print("‚ùå Speech Error:", e)

def dubverse_tts(text: str, api_key: str, speaker_no: int = 1190, output="response.wav") -> str:
    url = "https://audio.dubverse.ai/api/tts"
    headers = {
        "X-API-KEY": api_key,
        "Content-Type": "application/json"
    }
    payload = {
        "text": text,
        "speaker_no": speaker_no,
        "config": {"use_streaming_response": False}
    }
    resp = requests.post(url, headers=headers, json=payload)
    if resp.status_code == 200:
        with open(output, "wb") as f:
            f.write(resp.content)
        os.system(f"afplay {output}")  # Use 'aplay' or 'ffplay' for Linux
        print(f"‚úÖ Saved audio to {output}")
        return output
    else:
        raise Exception(f"Dubverse API Error {resp.status_code}: {resp.text}")

def ask_language(api_key):
    print("üåê Which language do you prefer: English, Hindi, or Marathi?")
    speak_response("Which language do you prefer: English, Hindi, or Marathi", 'en', api_key)
    speech = recognize_speech()
    if "hindi" in speech.lower() or "‡§π‡§ø‡§Ç‡§¶‡•Ä" in speech.lower():
        return 'hi'
    elif "marathi" in speech.lower() or "‡§Æ‡§∞‡§æ‡§†‡•Ä" in speech.lower():
        return 'mr'
    elif "english" in speech.lower() or "‡§á‡§Ç‡§ó‡•ç‡§≤‡§ø‡§∂" in speech.lower():
        return 'en'
    else:
        print("‚ö†Ô∏è Could not detect language. Defaulting to English.")
        return 'en'

def detect_disease(image_path):
    results = model(image_path)
    names = results[0].names
    probs = results[0].probs.data.tolist()
    predicted = names[np.argmax(probs)]
    print("üîç Predicted Disease:", predicted)
    return predicted

def generate_advisory(disease, lang):
    return disease_solutions.get(disease, {
        'en': "Disease not recognized.",
        'hi': "‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§à‡•§",
        'mr': "‡§∞‡•ã‡§ó ‡§ì‡§≥‡§ñ‡§§‡§æ ‡§Ü‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä."
    })[lang]

def main():
    if not API_KEY:
        print("‚ùå Dubverse API key not found in .env file.")
        return

    language = ask_language(API_KEY)
    image_path = input("üñºÔ∏è Enter path of grape leaf image: ").strip()
    if not os.path.exists(image_path):
        print("‚ùå Invalid image path.")
        return

    print("üì∏ Detecting disease...")
    disease = detect_disease(image_path)
    advisory = generate_advisory(disease, language)

    print(f"üó£Ô∏è Advisory ({language}):", advisory)
    speak_response(advisory, lang=language, api_key=API_KEY)

if __name__ == "__main__":
    main()